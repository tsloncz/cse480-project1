#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>
using namespace std;

const int block_size = 4;

void nested_loop_join(ifstream &a, ifstream &b, ofstream &out);
void sort_merge_join(ifstream &a, ifstream &b, ofstream &out);

int main()
{
    ifstream r("R.txt");
    ifstream s("S.txt");
    ofstream t1("T1.txt");
    ofstream t2("T2.txt");
        
    if(!r)
    {
        cout << "Unable to open file R.txt" << endl;
    }
    if(!s)
    {
        cout << "Unable to open file S.txt" << endl;
    }
    if(!t1)
    {
        cout << "Unable to write to file T1.txt" << endl;
    }
    if(!t2)
    {
        cout << "Unable to write to file T2.txt" << endl;
    }

    nested_loop_join(r, s, t1);
    
    r.clear();
    r.seekg(0);
    s.clear();
    s.seekg(0);
    
    sort_merge_join(r, s, t2);

    r.close();
    s.close();
    t1.close();
    t2.close();
    return 0;
}

void nested_loop_join(ifstream &r, ifstream &s, ofstream &t)
{
    while(r.good())
    {
        string r_line;
        getline(r, r_line);
        int r_num = atoi(r_line.c_str());
        while(s.good())
        {
            string s_line;
            getline(s, s_line);
            int s_num = atoi(s_line.c_str());
            if(r_num == s_num && r.good()
               && s.good())
            {
                t << r_num;
                t << ", ";
                t << s_num;
                t << endl;
            }
        }
        s.clear();
        s.seekg(0);
    }
    return;
}

// Assume files are sorted for now
void sort_merge_join(ifstream &r, ifstream &s, ofstream &t)
{
    bool read_from_r = true;
    bool read_from_s = true;
    while(r.good() && s.good())
    {
        string r_line;
        int r_num;
        string s_line;
        int s_num;
        if(read_from_r)
        {
            getline(r, r_line);
            r_num = atoi(r_line.c_str());
        }
        if(read_from_s)
        {        
            getline(s, s_line);
            s_num = atoi(s_line.c_str());
        }

        if(r.good() && s.good())
        {
            if(r_num == s_num)
            {
                t << r_num;
                t << ", ";
                t << s_num;
                t << endl;
                read_from_r = true;
                read_from_s = true;
            }
            else if(r_num < s_num)
            {
                read_from_r = true;
                read_from_s = false;
            }
            else if(r_num > s_num)
            {
                read_from_r = false;
                read_from_s = true;
            }
        }
    }
    return;
}
